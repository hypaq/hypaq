using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace QasmGenerator
{
    class Program
    {
        /// <summary>
        /// Entry point of the application.
        /// </summary>
        /// <param name="args">Command-line arguments. Expects one argument: the path to the input file containing target folder paths.</param>
        static void Main(string[] args)
        {
            // Validate command-line arguments
            if (args.Length != 1)
            {
                Console.WriteLine("Usage: QasmGenerator.exe <input_file_with_target_folders.txt>");
                return;
            }

            string inputFilePath = args[0];

            // Check if the input file exists
            if (!File.Exists(inputFilePath))
            {
                Console.WriteLine($"Error: The input file '{inputFilePath}' does not exist.");
                return;
            }

            // Read target folder paths from the input file
            List<string> targetFolders = new List<string>();

            try
            {
                targetFolders = File.ReadAllLines(inputFilePath)
                                    .Where(line => !string.IsNullOrWhiteSpace(line))
                                    .Select(line => line.Trim())
                                    .ToList();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error reading the input file: {ex.Message}");
                return;
            }

            // Process each target folder
            foreach (string targetFolder in targetFolders)
            {
                if (!Directory.Exists(targetFolder))
                {
                    Console.WriteLine($"Warning: The directory '{targetFolder}' does not exist. Skipping.");
                    continue;
                }

                Console.WriteLine($"Processing target folder: {targetFolder}");

                // Generate .qasm files from n=5 to n=120
                for (int n = 5; n <= 120; n++)
                {
                    string fileName = $"FC_static_{n}.qasm";
                    string filePath = Path.Combine(targetFolder, fileName);

                    try
                    {
                        GenerateQasmFile(n, filePath);
                        Console.WriteLine($"Successfully created: {fileName}");
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"Error creating '{fileName}': {ex.Message}");
                    }
                }

                Console.WriteLine($"Completed processing for folder: {targetFolder}\n");
            }

            Console.WriteLine("All target folders have been processed.");
        }

        /// <summary>
        /// Generates a .qasm file representing a fully connected quantum circuit with n qubits.
        /// </summary>
        /// <param name="n">Number of qubits.</param>
        /// <param name="filePath">Full path to the .qasm file to be created.</param>
        static void GenerateQasmFile(int n, string filePath)
        {
            using (StreamWriter writer = new StreamWriter(filePath))
            {
                // Write header comments
                writer.WriteLine("// Benchmark generated by QasmGenerator on " + DateTime.Now.ToString("yyyy-MM-dd_HH-mm-ss"));
                writer.WriteLine("// Fully Connected Quantum Circuit with " + n + " qubits");
                writer.WriteLine("// Gate Set: ['cx']");
                writer.WriteLine();

                // Write QASM version and include statement
                writer.WriteLine("OPENQASM 2.0;");
                writer.WriteLine("include \"qelib1.inc\";");
                writer.WriteLine();

                // Define quantum register
                writer.WriteLine($"qreg q[{n}];");
                writer.WriteLine();

                // Generate all unique CX gates between qubit pairs
                List<string> gateLines = GenerateCxGates(n);
                foreach (string gateLine in gateLines)
                {
                    writer.WriteLine(gateLine);
                }

                // Optionally, add barrier and measurements if needed
                // For now, as per the user's last example, we'll omit them
            }
        }

        /// <summary>
        /// Generates a list of CX gate instructions for a fully connected circuit with n qubits.
        /// </summary>
        /// <param name="n">Number of qubits.</param>
        /// <returns>List of CX gate instructions as strings.</returns>
        static List<string> GenerateCxGates(int n)
        {
            List<string> gates = new List<string>();

            for (int i = 0; i < n; i++)
            {
                for (int j = i + 1; j < n; j++)
                {
                    gates.Add($"cx q[{i}],q[{j}];");
                }
            }

            return gates;
        }
    }
}
